
{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "users",
    "license": {
      "name": "Tenable.io"
    },
    "description": "User accounts enable you to provide access to Tenable.io and manage permissions for Tenable.io resources. You can use the API to perform standard CRUD operations on user objects, and also change passwords, generate API keys, impersonate users, enable multi-factor authentication, and manage access authorizations.\n\nFor background information about managing users, see [Tenable.io Vulnerability Management User Guide](https://docs.tenable.com/tenableio/vulnerabilitymanagement/Content/Settings/Users.htm)."
  },
  "security": [
    {
      "cloud": []
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User accounts enable you to provide access to Tenable.io and manage permissions for Tenable.io resources. You can use the API to perform standard CRUD operations on user objects, and also change passwords, generate API keys, impersonate users, enable multi-factor authentication, and manage access authorizations.\n\nFor background information about managing users, see [Tenable.io Vulnerability Management User Guide](https://docs.tenable.com/tenableio/vulnerabilitymanagement/Content/Settings/Users.htm)."
    }
  ],
  "servers": [
    {
      "url": "https://cloud.tenable.com"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Create user",
        "description": "Creates a new user.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-create",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The login name for the user. A valid username must be in the format, `name@domain`, where `domain` corresponds to a domain approved for your Tenable.io instance.\n\n**Note:** During initial setup, Tenable configures approved domains for your Tenable.io instance. To add domains to your instance, contact Tenable Support."
                  },
                  "password": {
                    "type": "string",
                    "description": "The initial password for the user. Passwords must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character symbol.",
                    "format": "password"
                  },
                  "permissions": {
                    "type": "integer",
                    "description": "The user permissions as described in [Permissions](doc:permissions).",
                    "format": "int32"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the user (for example, first and last name)."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user. A valid email address must be in the format, `name@domain`, where `domain` corresponds to a domain approved for your Tenable.io instance.\n\nThis email address overrides the email address set in `username`. If your request omits this parameter, Tenable.io uses the `username` value as the user's email address.\n\n**Note:** During initial setup, Tenable configures approved domains for your Tenable.io instance. To add domains to your instance, contact Tenable Support."
                  }
                },
                "required": [
                  "username",
                  "password",
                  "permissions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if Tenable.io successfully creates the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "response": {
                    "value": {
                      "uuid": "d748ab37-f2cf-461c-8648-a8328c0f483e",
                      "id": 5,
                      "user_name": "user2@example.com",
                      "username": "user4@api.demo",
                      "email": "user2@example.com",
                      "name": "Test User",
                      "type": "local",
                      "aggregate": true,
                      "container_uuid": "f8973c82-01a7-4aee-9754-4a61e3b3e70e",
                      "permissions": 32,
                      "login_fail_count": 0,
                      "login_fail_total": 0,
                      "enabled": true,
                      "lockout": 0,
                      "uuid_id": "d748ab37-f2cf-461c-8648-a8328c0f483e"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if a request parameter is invalid."
          },
          "403": {
            "description": "Returned if you do not have permission to create a user."
          },
          "409": {
            "description": "Returned if you attempt to create a duplicate user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List users",
        "description": "Returns a list of users.<p>Requires BASIC [16] user permissions. If the requesting user has ADMINISTRATOR [64] permissions, Tenable.io returns all attributes for individual user details. Otherwise, user details include only the `uuid`, `id`, `username`, and `email` attributes. See [Permissions](doc:permissions).</p>",
        "operationId": "users-list",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "response": {
                    "value": {
                      "users": [
                        {
                          "uuid": "0d67d2fa-558c-4f89-b506-41b4b73101e1",
                          "id": 2,
                          "user_name": "admin@example.com",
                          "username": "admin@example.com",
                          "email": "admin@example.com",
                          "name": "Admin Example",
                          "type": "local",
                          "container_uuid": "f8973c82-01a7-4aee-9754-4a61e3b3e70e",
                          "permissions": 64,
                          "last_login_attempt": 1586458924584,
                          "login_fail_count": 0,
                          "login_fail_total": 0,
                          "enabled": true,
                          "lockout": 0,
                          "lastlogin": 1544477990398,
                          "uuid_id": "0d67d2fa-558c-4f89-b506-41b4b73101e1"
                        },
                        {
                          "uuid": "1eddf745-7f6b-440a-90c6-df88efe2cf77",
                          "id": 4,
                          "user_name": "user3@example.com",
                          "username": "user3@example.com",
                          "email": "user3@example.com",
                          "name": "User Sample",
                          "type": "local",
                          "container_uuid": "f8973c82-01a7-4aee-9754-4a61e3b3e70e",
                          "permissions": 32,
                          "last_login_attempt": 1584354906000,
                          "login_fail_count": 1,
                          "login_fail_total": 1,
                          "enabled": true,
                          "lockout": 0,
                          "uuid_id": "1eddf745-7f6b-440a-90c6-df88efe2cf77"
                        },
                        {
                          "uuid": "d748ab37-f2cf-461c-8648-a8328c0f483e",
                          "id": 5,
                          "user_name": "user4@example.com",
                          "username": "user4@example.com",
                          "email": "user4@example.com",
                          "name": "User Sample",
                          "type": "local",
                          "container_uuid": "f8973c82-01a7-4aee-9754-4a61e3b3e70e",
                          "permissions": 32,
                          "last_login_attempt": 1588869878417,
                          "login_fail_count": 0,
                          "login_fail_total": 0,
                          "enabled": true,
                          "lockout": 0,
                          "uuid_id": "d748ab37-f2cf-461c-8648-a8328c0f483e"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returned if you do not have permission to view the list of users."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get user details",
        "description": "Returns details for a specific user.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-details",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The UUID (`uuid`) or unique ID (`id`) of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "response": {
                    "value": {
                      "uuid": "60f73e4f-8983-41c2-a13c-39074cbb6229",
                      "id": 255,
                      "user_name": "user@example.com",
                      "username": "user@example.com",
                      "email": "user@example.com",
                      "name": "User One",
                      "type": "local",
                      "permissions": 64,
                      "roles": [
                        "ADMIN"
                      ],
                      "last_login_attempt": 1569429971576,
                      "login_fail_count": 0,
                      "login_fail_total": 3,
                      "enabled": true,
                      "undeletable": false,
                      "two_factor": {
                        "sms_phone": "+15551236789",
                        "sms_enabled": 1,
                        "email_enabled": 0
                      },
                      "group_uuids": [
                        "f3cd0bb2-cabb-4825-9d0c-49c77fe5fba7",
                        "00000000-0000-0000-0000-000000000000",
                        "2d5c70da-b177-43ed-8325-a25a846c8977",
                        "a507f383-3130-4c89-b202-b69ad9a75a84",
                        "afed07ce-8e51-4574-a420-90057fea6a7f"
                      ],
                      "lockout": 0,
                      "container_uuid": "270f77d7-3b5b-478c-ac06-be827c00753e",
                      "lastlogin": 1605630009020,
                      "uuid_id": "73cc516b-51d0-445a-8e0d-6f618455770e"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returned if you do not have permission to view the given user details."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Updates an existing user account.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-edit",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The UUID (`uuid`) or unique ID (`id`) of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "integer",
                    "description": "The user permissions for the user as described in [Permissions](doc:permissions).",
                    "format": "int32"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the user (for example, first and last name)."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user. A valid email address must be in the format, `name@domain`, where `domain` corresponds to a domain approved for your Tenable.io instance.\n\nThis email address overrides the email address set in `username`. If your request omits this parameter, Tenable.io uses the `username` value as the user's email address.\n\n**Note:** During initial setup, Tenable configures approved domains for your Tenable.io instance. To add domains to your instance, contact Tenable Support."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user's account is enabled (`true`) or disabled (`false`)."
                  }
                },
                "required": [
                  "permissions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if Tenable.io successfully updates the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "response": {
                    "value": {
                      "uuid": "1eddf745-7f6b-440a-90c6-df88efe2cf77",
                      "id": 4,
                      "user_name": "user3@example.com",
                      "username": "user3@example.com",
                      "email": "user3@example.com",
                      "name": "Test User",
                      "type": "local",
                      "container_uuid": "f8973c82-01a7-4aee-9754-4a61e3b3e70e",
                      "permissions": 32,
                      "login_fail_count": 0,
                      "login_fail_total": 0,
                      "enabled": false,
                      "lockout": 0,
                      "uuid_id": "1eddf745-7f6b-440a-90c6-df88efe2cf77"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if a request parameter is invalid."
          },
          "403": {
            "description": "Returned if you do not have permission to update a user."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "409": {
            "description": "Returned if you attempt to change your own account's enabled or disabled status."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Deletes a user.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-delete",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The UUID (`uuid`) or unique ID (`id`) of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if Tenable.io deletes the user.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returned if you do not have permission to delete the specified user."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "409": {
            "description": "Returned if you try to delete your own account."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Returned if Tenable.io fails to delete the user.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "statusCode": 500,
                      "error": "Internal Server Error",
                      "message": "An internal server error occurred. Please wait a moment and try your request again."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/chpasswd": {
      "put": {
        "summary": "Change password",
        "description": "Changes the password for a user. \n\nIf you reset a user's password, Tenable.io automatically resets the user's `login_fail_count' and `lockout` attributes to `0`.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-password",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user whose password you want to change.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "type": "string",
                    "description": "The current password for the user.",
                    "format": "password"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password for the user.",
                    "format": "password"
                  }
                },
                "required": [
                  "current_password",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if Tenable.io successfully changes the user password.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if Tenable.io cannot change the user password, because the new password is too short."
          },
          "403": {
            "description": "Returned if you do not have the permissions needed to change the user's password."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Returned if Tenable.io fails to change the password.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "statusCode": 500,
                      "error": "Internal Server Error",
                      "message": "An internal server error occurred. Please wait a moment and try your request again."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/enabled": {
      "put": {
        "summary": "Enable user account",
        "description": "Enables or disables an existing user account.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-enabled",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "The status you want to set for the user account: `true` to enable or `false` to disable."
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an array of user objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "response": {
                    "value": {
                      "object": "user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returned if you do not have permission to update a user."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "409": {
            "description": "Returned if you try to change your own permissions."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/authorizations": {
      "get": {
        "summary": "Get user authorizations",
        "description": "Returns user authorizations for accessing a Tenable.io instance. Access methods include user name and password, single sign-on (SSO) with SAML, and API.\n**Note:** All access methods are authorized by default.\n\nFor background information about managing user authorizations, see [Tenable.io Vulnerability Management User Guide](https://docs.tenable.com/tenableio/vulnerabilitymanagement/Content/Settings/ManageUserAccessAuthorizations.htm).<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-list-auths",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The UUID of the user. To determine the user UUID, use the [GET /users](ref:users-list) endpoint.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns authorizations for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorizations"
                },
                "examples": {
                  "response": {
                    "value": {
                      "account_uuid": "6c8ffd08-53dc-493e-9823-9f99d4adeab4",
                      "user_uuid": "4a5e55d6-fd20-465d-9a29-0f1f166d0f49",
                      "api_permitted": true,
                      "password_permitted": false,
                      "saml_permitted": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "error": "User[UUID=6ab5bc4a-f829-483d-ae75-57c36bb2febd] not found."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user authorizations",
        "description": "Updates user authorizations for accessing a Tenable.io instance. Use the endpoint to grant and revoke authorizations.\n\n**Note:** You cannot update authorizations for the current user.\n\nFor background information about managing user authorizations, see [Tenable.io Vulnerability Management User Guide](https://docs.tenable.com/tenableio/vulnerabilitymanagement/Content/Settings/ManageUserAccessAuthorizations.htm).<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-update-auths",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The UUID of the user. To determine the UUID, use the [GET /users](ref:users-list) endpoint.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorizations_update"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returned if Tenable.io successfully updates the user's authorizations.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if your request specifies invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "error": "Unexpected character ('}' (code 125)): was expecting double-quote to start field name\n at [(String)\"{\r\n\"api_permitted\" : true,\r\n}\"; line: 3, column: 2]"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "error": "User[UUID=6ab5bc4a-f829-483d-ae75-57c36bb2febd] not found."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/keys": {
      "put": {
        "summary": "Generate API keys",
        "description": "Generates the API keys for a user.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-keys",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if Tenable.io successfully generates the API keys for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keys"
                },
                "examples": {
                  "response": {
                    "value": {
                      "accessKey": "26e07fb07181cf86e1bc7a240ce398645cf2bb80bbbefc178f100d6f5ffc067d",
                      "secretKey": "4be00decc6ea29e65d2910f1d54d23c14190a267285de4b05a481b1e6d3f0fd6"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returned if you do not have permission to generate API keys for the user."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Returned if Tenable.io fails to generate the API keys.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "statusCode": 500,
                      "error": "Internal Server Error",
                      "message": "An internal server error occurred. Please wait a moment and try your request again."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/impersonate": {
      "post": {
        "summary": "Impersonate user",
        "description": "Allows the current administrator to impersonate the given user.<p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-impersonate",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user you want to impersonate.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the impersonation was successful.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Returned if Tenable.io cannot process the request for any reason, for example, wrong permissions or an invalid API key."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/two-factor/send-verification": {
      "post": {
        "summary": "Send verification code",
        "description": "Sends a one-time verification code to the user's phone number to start the process of enabling two-factor authentication.\n\n **Note:** The workflow for two-factor authentication is as follows:<ol><li>[Send a verification code](ref:users-two-factor-enable).</li><li>[Validate the verification code](ref:users-two-factor-enable-verify).</li><li>[Configure two-factor authentication](ref:users-two-factor).</li></ol><p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-two-factor-enable",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sms_phone": {
                    "type": "string",
                    "description": "The phone number where Tenable.io sends the one-time verification code. Must begin with the `+` character and the country code."
                  }
                },
                "required": [
                  "sms_phone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if Tenable.io sends the one-time verification code successfully to the specified phone number.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if Tenable.io cannot send the verification code.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "statusCode": 400,
                      "error": "Bad Request",
                      "message": "child \"sms_phone\" fails because [\"sms_phone\" with value \"11231234567\" fails to match the required pattern: /^(\\+1[2-9][0-8]\\d[2-9]\\d{6}|\\+[1-9]\\d{1,14})$/]"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/two-factor/verify-code": {
      "post": {
        "summary": "Validate verification code",
        "description": "Validate the verification code sent to a phone number. If this request is successful, it enables two-factor authentication for the specified user.\n\n **Note:** The workflow for two-factor authentication is as follows:<ol><li>[Send a verification code](ref:users-two-factor-enable).</li><li>[Validate the verification code](ref:users-two-factor-enable-verify).</li><li>[Configure two-factor authentication](ref:users-two-factor).</li></ol><p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-two-factor-enable-verify",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "verification_code": {
                    "type": "string",
                    "description": "The verification code sent in the send-verification request."
                  }
                },
                "required": [
                  "verification_code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if Tenable.io successfully validates the verification code and enables two-factor authentication.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if Tenable.io fails to validate the verification code because the verification code was empty, incorrect, or expired."
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/two-factor": {
      "put": {
        "summary": "Configure two-factor authentication ",
        "description": "Enables or disables a user's two-factor authentication settings.\n\n **Note:** The workflow for two-factor authentication is as follows:<ol><li>[Send a verification code](ref:users-two-factor-enable).</li><li>[Validate the verification code](ref:users-two-factor-enable-verify).</li><li>[Configure two-factor authentication](ref:users-two-factor).</li></ol><p>Requires ADMINISTRATOR [64] user permissions. See [Permissions](doc:permissions).</p>",
        "operationId": "users-two-factor",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "required": true,
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email_enabled": {
                    "type": "boolean",
                    "description": "Specifies whether backup notification for two-factor authentication is enabled. If enabled, Tenable.io sends the two-factor verification code via e-mail, as well as via the default SMS message."
                  },
                  "sms_enabled": {
                    "type": "boolean",
                    "description": "Specifies whether two-factor authentication is enabled. If enabled, Tenable.io sends the verification code via an SMS message. This parameter must be enabled to enable two-factor verification for the user."
                  },
                  "sms_phone": {
                    "type": "string",
                    "description": "The phone number to use for two-factor authentication. Must begin with the `+` character and the country code. This field is required when sms\\_enabled is set to `true`.",
                    "example": "+155555555555"
                  }
                },
                "required": [
                  "email_enabled",
                  "sms_enabled",
                  "sms_phone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returned if the two-factor authentication settings update is successful.",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "response": {
                    "value": {}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Returned if Tenable.io cannot find the specified user."
          },
          "429": {
            "description": "Returned if you attempt to send too many requests in a specific period of time. For more information, see [Rate Limiting](doc:rate-limiting).",
            "content": {
              "text/html": {
                "examples": {
                  "response": {
                    "value": "<html>\n\n<head>\n    <title>429 Too Many Requests</title>\n</head>\n\n<body bgcolor=\"white\">\n    <center>\n        <h1>429 Too Many Requests</h1>\n    </center>\n    <hr>\n    <center>nginx</center>\n</body>\n\n</html>"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cloud": {
        "type": "apiKey",
        "in": "header",
        "name": "X-ApiKeys",
        "description": "Format - accessKey=ACCESS_KEY;secretKey=SECRET_KEY"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the user."
          },
          "id": {
            "type": "integer",
            "description": "The unique ID of the user."
          },
          "user_name": {
            "type": "string",
            "description": "The username for the user."
          },
          "username": {
            "type": "string",
            "description": "The username for the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user. If this attribute is empty, Tenable.io uses the `username` value as the user's email address."
          },
          "name": {
            "type": "string",
            "description": "The name of the user (for example, first and last name)."
          },
          "type": {
            "type": "string",
            "description": "The type of user. The only supported type is `local`."
          },
          "permissions": {
            "type": "integer",
            "description": "The user permissions as described in [Permissions](doc:permissions).",
            "format": "int32"
          },
          "last_login_attempt": {
            "type": "integer",
            "description": "The time (in Unix milliseconds) of the last time the user failed to log in to the Tenable.io user interface. This attribute is only present if the user has attempted unsuccessfully to log in to the Tenable.io user interface."
          },
          "login_fail_count": {
            "type": "integer",
            "description": "The number of failed login attempts since the user last successfully logged in to the Tenable.io user interface. \n\nIf this attribute is greater than 5, Tenable.io locks the user account (that is, updates the `lockout` attribute for the user to `1`.)\n\nYou can reset this count to `0` by [changing the user's password](ref:users-password) or [generating the user's API keys](ref:users-keys)."
          },
          "login_fail_total": {
            "type": "integer",
            "description": "The total number of failed login attempts for the user."
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the user account is enabled (`true`) or disabled (`false`)."
          },
          "undeletable": {
            "type": "boolean",
            "description": "Specifies whether the user account is undeletable (`true`) or deletable (`false`)."
          },
          "two_factor": {
            "$ref": "#/components/schemas/TwoFactor"
          },
          "lockout": {
            "type": "integer",
            "description": "Specifies whether the user can log into the Tenable.io user interface (`0`) or is locked out (`1`).\n\nTenable.io automatically updates this attribute to `1` if the `login_fail_count` attribute for the user is greater than 5. To unlock a user account, reset the user's password using the [PUT /users/{user_id}/chpasswd](ref:users-password) endpoint.\n\n**Note:** A user can be locked out of the user interface but still submit API requests if they are assigned the appropriate authorizations (`api_permitted`). To prevent a user from submitting API requests, limit authorizations using the [PUT /users/{user_id}/authorizations](ref:users-update-auths) endpoint, or disable the user entirely using the [PUT /users/{user_id}/enabled](ref:users-enabled) endpoint."
          },
          "container_uuid": {
            "type": "string",
            "description": "The UUID of the Tenable.io instance to which the user belongs."
          },
          "lastlogin": {
            "type": "integer",
            "description": "The last time (in Unix milliseconds) that the user successfully logged in to the Tenable.io user interface. This attribute is only present if the user has logged in at least once successfully to the Tenable.io user interface."
          },
          "uuid_id": {
            "type": "string",
            "description": "The UUID for the user."
          }
        }
      },
      "TwoFactor": {
        "type": "object",
        "properties": {
          "sms_phone": {
            "type": "string",
            "description": "The phone number used for two-factor authentication. The phone number begins with the `+` character and the country code. This field is required when sms_enabled is set to `true`."
          },
          "sms_enabled": {
            "type": "integer",
            "description": "Indicates whether two-factor authentication is enabled (`1`) or disabled (`0`)."
          },
          "email_enabled": {
            "type": "integer",
            "description": "Indicates whether backup notification for two-factor authentication is enabled (`1`) or disabled (`0`). If enabled, Tenable.io sends the two-factor verification code via e-mail, as well as via the default SMS message."
          }
        }
      },
      "keys": {
        "type": "object",
        "properties": {
          "accessKey": {
            "type": "string",
            "description": "The access key for the user account in Tenable.io. Use this key in combination with the user's secret key to submit authorized API requests to Tenable.io."
          },
          "secretKey": {
            "type": "string",
            "description": "The secret key for the user account in Tenable.io. Use this key in combination with the user's access key to submit authorized API requests to Tenable.io."
          }
        }
      },
      "authorizations": {
        "type": "object",
        "properties": {
          "account_uuid": {
            "type": "string",
            "description": "The UUID of the container.",
            "format": "uuid"
          },
          "user_uuid": {
            "type": "string",
            "description": "The UUID of the user.",
            "format": "uuid"
          },
          "api_permitted": {
            "type": "boolean",
            "description": "Indicates whether API access is authorized for the user."
          },
          "password_permitted": {
            "type": "boolean",
            "description": "Indicates whether user name and password login is authorized for the user."
          },
          "saml_permitted": {
            "type": "boolean",
            "description": "Indicates whether SSO with SAML is authorized for the user."
          }
        }
      },
      "authorizations_update": {
        "type": "object",
        "description": "Specify `true` or `false` to grant or revoke authorizations.",
        "properties": {
          "api_permitted": {
            "type": "boolean",
            "description": "Indicates whether API access is authorized for the user."
          },
          "password_permitted": {
            "type": "boolean",
            "description": "Indicates whether user name and password login is authorized for the user."
          },
          "saml_permitted": {
            "type": "boolean",
            "description": "Indicates whether SSO with SAML is authorized for the user."
          }
        },
        "required": [
          "api_permitted",
          "password_permitted",
          "saml_permitted"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Tenable.io API error response.",
        "properties": {
          "error": {
            "type": "string",
            "description": "A brief description of the cause of the error."
          }
        }
      }
    }
  }
}